# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:

  vmImage: ubuntu-latest

stages:
  - stage: TerraformValidate
    jobs:
     - job: TerraformValidateJob
       continueOnError: false
       steps:
        - task: PublishPipelineArtifact@1
          displayName: publish artifacts
          inputs:
            targetPath: '$(System.DefaultWorkingDirectory)/IAC/Terraform/'
            artifact: 'manifests'
            publishLocation: 'pipeline'
        - task: TerraformInstaller@0
          displayName: Terraforminstall
          inputs:
            terraformVersion: 'latest'
        - task: TerraformCLI@0
          displayName: Terrafomrinit
          inputs:
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/IAC/Terraform/'
            backendType: 'azurerm'
            backendServiceArm: 'terraform-connection'
            ensureBackend: true
            backendAzureRmResourceGroupName: 'rg-terraform-backend-group'
            backendAzureRmResourceGroupLocation: 'centralus'
            backendAzureRmStorageAccountName: 'terraformbackendStorage'
            backendAzureRmContainerName: 'terrafomrbackend'
            backendAzureRmKey: 'terrform-base.tfstate'
            allowTelemetryCollection: false
        - task: TerraformCLI@0
          displayName: Terraformvalidate 
          inputs:
            command: 'validate'
            workingDirectory: '$(System.DefaultWorkingDirectory)/IAC/Terraform/'
            allowTelemetryCollection: true



